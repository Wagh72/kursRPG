#include <SFML/Graphics.hpp>
#include <vector>
#include <sstream>
#include <iostream>

const int WINDOW_WIDTH = 1024;
const int WINDOW_HEIGHT = 1024;

const int TILE_SIZE = 32;

const int LAYER_WIDTH = 32;
const int LAYER_HEIGHT = 32;

int layer1[LAYER_HEIGHT][LAYER_WIDTH] =
{
    1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,35,36,5,6,19,19,2,3,4,1,2,3,4,1,2,5,6,
    9,6,7,19,19,21,22,19,19,19,11,12,21,22,11,43,44,13,14,19,9,10,11,12,9,10,5,5,6,10,5,6,
    17,14,15,19,21,19,19,19,19,19,19,19,19,30,19,51,52,21,19,19,6,24,5,6,6,18,19,19,19,5,6,14,
    25,22,21,23,19,19,19,19,19,6,19,19,19,26,27,35,36,5,19,19,19,32,19,14,14,19,19,21,19,19,19,22,
    30,13,21,19,19,6,19,19,1,14,6,7,19,2,3,43,44,13,14,19,22,2,19,22,22,2,3,4,1,21,22,4,
    30,21,11,19,32,6,19,12,6,7,14,15,29,30,11,51,52,21,22,19,5,5,19,12,9,10,23,24,9,10,11,12,
    17,29,19,20,17,19,19,22,19,15,22,23,29,30,19,51,52,18,19,19,13,19,19,20,5,6,31,32,17,18,19,20,
    25,29,30,19,19,14,19,22,30,23,23,15,25,26,19,51,52,26,27,21,21,19,19,28,13,14,27,28,25,26,27,28,
    1,29,29,19,19,22,19,22,19,22,23,23,29,19,19,43,44,2,3,23,23,19,19,19,21,22,3,4,1,5,6,4,
    9,10,11,19,19,19,19,30,6,7,30,19,9,19,11,35,36,10,11,5,6,31,32,19,19,23,19,24,9,13,14,12,
    17,19,19,19,19,19,19,6,21,15,19,19,19,19,19,43,44,18,19,13,14,18,19,20,17,19,19,32,17,21,22,20,
    19,19,23,29,19,19,19,19,22,19,19,19,19,19,27,35,36,26,27,21,22,26,27,28,25,19,19,19,25,26,27,28,
    1,2,31,32,1,2,31,22,21,23,3,4,1,3,4,43,44,2,3,21,22,2,5,6,6,6,3,23,24,24,5,6,
    9,10,11,29,30,10,11,12,9,10,11,23,24,3,4,35,36,10,11,12,9,10,13,14,14,14,11,31,32,32,13,14,
    17,29,29,30,17,21,19,20,21,21,19,31,32,22,4,35,36,5,6,20,17,18,21,22,22,22,19,20,17,18,21,22,
    25,26,27,29,30,26,23,24,25,26,27,28,29,30,4,35,36,13,14,28,25,26,27,28,25,26,27,28,25,26,27,28,
    37,38,39,40,40,37,37,38,40,38,39,40,40,38,39,61,62,37,38,37,38,39,37,37,38,37,37,37,37,38,37,38,
    45,46,45,48,45,45,45,46,45,46,45,45,48,46,45,58,57,45,46,45,46,47,45,45,46,45,45,45,45,46,45,46,
    17,5,6,7,8,8,8,8,5,6,5,5,6,7,8,35,36,21,22,20,17,18,19,20,17,18,19,20,17,18,19,20,
    25,5,14,14,14,14,15,16,8,8,8,6,7,8,16,35,36,29,30,28,25,26,27,28,25,26,7,8,25,26,27,28,
    5,5,19,19,19,14,5,15,16,16,16,6,7,8,24,43,44,2,3,4,1,2,3,4,1,2,15,16,1,2,7,8,
    13,14,14,19,19,15,5,15,16,16,16,16,16,16,32,35,36,9,11,7,7,8,11,7,8,10,23,24,9,7,8,8,
    21,22,22,22,14,5,5,19,16,5,24,24,24,24,16,35,36,18,19,15,15,16,19,15,16,18,19,20,17,15,16,16,
    29,30,30,30,22,19,19,19,14,5,5,32,32,32,24,35,36,26,27,23,23,24,27,23,24,8,8,28,25,23,24,24,
    19,19,31,32,5,19,19,19,14,5,5,19,19,19,14,35,36,2,3,4,7,8,8,4,15,16,16,4,7,8,3,4,
    19,31,29,14,5,5,19,5,19,13,13,19,5,19,22,43,44,10,11,12,15,16,16,12,23,24,24,19,19,16,19,12,
    30,19,19,19,5,13,13,5,19,21,21,19,19,5,5,51,52,18,19,20,23,24,24,20,17,18,19,19,19,23,19,20,
    30,19,19,19,13,21,21,13,5,30,31,19,19,13,13,51,52,26,27,28,19,19,19,13,21,21,15,29,19,31,19,28,
    30,19,19,19,21,13,21,19,19,19,19,5,31,19,21,51,52,2,21,13,13,19,19,13,19,23,23,24,19,21,19,22,
    29,30,19,19,5,21,21,21,21,19,19,19,5,19,31,43,5,10,13,19,19,13,19,19,19,15,19,19,19,19,19,22,
    17,29,5,19,19,19,19,19,19,21,21,21,13,32,19,51,13,18,13,19,19,13,13,19,19,19,19,19,19,30,19,19,
    25,26,13,21,21,21,29,19,19,31,32,21,21,24,27,28,25,29,19,18,14,19,19,29,19,19,18,18,18,13,14,28
};

int layer2[LAYER_HEIGHT][LAYER_WIDTH] =
    {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,332,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,332,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,336,335,0,0,0,0,0,0,0,
    0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,
    0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,0,0,335,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,328,0,0,0,0,336,0,0,0,0,0,0,0,0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,332,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,330,0,0,0,0,0,0,0,
    336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,335,0,0,0,0,0,0,328,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,322,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,332,0,
    0,0,0,0,321,0,0,0,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,336,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,336,0,0,322,0,0,0,0,0,
    0,0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
int layer3[LAYER_HEIGHT][LAYER_WIDTH] =
{
    0,0,0,0,171,172,173,0,65,66,67,68,69,0,0,0,0,0,70,71,72,0,0,0,155,156,157,0,0,171,172,173,
    162,65,66,67,187,188,189,0,81,82,83,84,85,70,71,72,0,0,86,87,88,0,0,0,171,172,173,0,0,187,188,189,
    0,81,82,83,84,70,71,72,97,98,99,100,101,86,87,88,0,0,102,103,104,0,0,0,187,188,189,70,71,72,0,0,
    0,97,98,99,100,86,87,88,113,114,115,116,117,102,103,104,0,0,118,119,120,0,0,162,0,0,0,86,87,88,0,0,
    0,113,114,115,116,102,103,104,129,130,131,132,133,118,119,120,0,0,134,135,136,71,72,0,0,0,0,102,103,104,0,0,
    0,129,130,131,132,118,119,120,0,0,0,155,156,157,135,136,0,0,0,0,86,87,88,0,0,0,0,118,119,120,0,0,
    0,0,0,0,0,134,135,136,0,0,0,171,172,173,0,0,0,0,0,0,102,103,104,0,65,66,67,134,135,136,0,0,
    0,74,75,76,162,0,0,0,65,66,67,187,188,189,0,0,0,0,0,0,118,119,120,0,81,82,83,84,85,0,0,0,
    0,90,91,92,0,0,0,0,162,82,83,84,85,70,71,72,0,0,0,0,134,135,136,0,97,98,99,100,101,0,0,0,
    0,106,107,108,0,0,0,0,97,98,99,100,101,86,87,88,0,0,162,0,0,0,0,0,113,114,115,116,117,0,0,0,
    0,122,123,124,65,66,67,68,113,114,115,116,117,102,103,104,151,152,153,66,67,68,69,0,129,130,131,132,133,0,0,0,
    0,138,139,140,81,82,83,84,129,130,131,132,133,118,119,120,167,168,169,82,83,84,85,151,152,153,65,66,67,68,69,0,
    0,0,0,0,97,98,99,100,0,0,0,0,0,134,135,136,183,184,185,98,99,100,101,167,168,169,81,82,83,84,85,0,
    0,0,0,0,113,114,115,116,0,0,0,0,0,0,0,0,155,156,157,114,115,116,117,183,184,185,97,98,99,100,101,0,
    0,0,0,0,129,130,131,132,0,0,150,151,152,153,154,0,171,172,173,130,131,155,156,157,70,71,72,114,115,116,117,0,
    0,162,0,0,0,0,0,0,0,0,166,167,168,169,170,0,187,188,189,162,0,171,172,173,86,87,88,130,131,132,133,0,
    0,0,0,0,0,0,0,0,0,0,182,183,184,185,186,0,0,0,0,0,0,187,188,189,102,103,104,65,66,67,68,69,
    0,65,66,67,68,69,0,0,74,75,76,65,66,67,68,0,70,71,72,0,0,74,75,76,118,119,120,81,82,83,84,85,
    164,81,82,83,84,85,164,0,90,91,92,81,82,83,84,0,86,87,88,0,162,90,91,92,134,135,136,97,98,99,100,101,
    0,97,98,99,100,101,0,0,106,107,108,97,98,99,100,0,102,103,104,0,0,106,107,108,0,0,0,113,114,115,116,117,
    0,113,114,115,116,74,75,76,122,123,124,113,114,115,116,0,118,119,120,0,164,122,123,124,0,0,0,129,130,131,132,133,
    0,129,130,131,132,90,91,92,138,139,140,129,130,131,132,0,134,135,136,0,0,138,139,140,0,0,0,65,66,67,68,69,
    0,0,0,0,0,106,107,108,0,0,74,75,76,0,0,0,0,0,0,0,0,0,74,75,76,0,164,81,82,83,84,85,
    0,70,71,72,0,122,123,124,0,0,90,91,92,0,0,0,65,66,67,68,69,0,90,91,92,0,0,97,98,99,100,101,
    0,86,87,88,0,138,139,140,0,0,106,107,108,0,0,0,81,82,83,84,85,0,106,107,108,164,0,113,114,115,116,117,
    0,102,103,104,0,0,0,0,0,0,122,123,124,0,0,0,97,98,99,100,101,0,122,123,124,0,0,129,130,131,132,133,
    0,118,119,120,0,0,70,71,72,0,138,139,164,0,0,0,113,114,115,116,117,0,138,139,140,0,0,0,164,0,0,0,
    0,134,135,136,0,0,86,87,88,0,0,0,0,0,0,0,129,130,131,65,66,67,68,69,0,0,70,71,72,0,0,0,
    155,156,157,0,0,0,102,103,104,0,155,156,157,0,0,0,0,0,0,81,82,83,84,85,0,0,86,87,88,0,0,0,
    171,172,173,0,0,0,118,119,120,0,171,172,173,0,0,0,0,0,0,97,98,99,100,101,0,0,102,103,104,0,0,0,
    187,188,189,0,164,0,134,135,136,0,187,188,189,0,0,0,0,0,0,113,114,115,116,117,164,0,118,119,120,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,130,131,132,133,0,0,134,135,136,0,0,0
};



bool loadTexture(sf::Texture &texture, const std::string &path)
{
    return texture.loadFromFile(path);
}

void drawMap(sf::RenderWindow& window, const sf::Texture& texture1, const sf::Texture& texture2, const sf::Texture& texture3)
{
    sf::Sprite sprite;
    const int ACTUAL_TILE_SIZE = 32; // 256 / 8 = 32 (256x256 .png = 8(32x32) - tiles)
    const int TEXTURE_ATLAS_WIDTH = 256;
    const int TEXTURE_TREES_ATLAS_WIDTH = 512;
    const int TEXTURE_GRASS_ATLAS_WIDTH = 128;

    sprite.setTexture(texture1);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer1[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }

    sprite.setTexture(texture2);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer2[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_GRASS_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_GRASS_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }

    sprite.setTexture(texture3);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer3[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_TREES_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_TREES_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }
}

int main()
{
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "test");
    sf::Texture texture1, texture2, texture3;
    if (!loadTexture(texture1, "src/textures/GrassAndTrails.png"))
        std::cerr << "Error loading texture1" << std::endl;
    else if (!loadTexture(texture2, "src/textures/GrassSprite.png"))
        std::cerr << "Error loading texture2" << std::endl;
    else if (!loadTexture(texture3, "src/textures/TX_PlantFix.png"))
        std::cerr << "Error loading texture3" << std::endl;

    sf::Clock clock;
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear(sf::Color::White);
        drawMap(window, texture1, texture2, texture3);
        window.display();

        static int frameCount = 0;
        static float elapsedTime = 0.0f;
        frameCount++;
        elapsedTime += clock.restart().asSeconds();

        if (elapsedTime >= 1.0f)
        {
            std::stringstream title;
            title << "FPS: " << frameCount;
            window.setTitle(title.str());
            frameCount = 0;
            elapsedTime = 0.0f;
        }
    }
}












/*
int layer3[LAYER_HEIGHT][LAYER_WIDTH] =
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 13},
    {0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21},
    {0, 9, 10, 11, 12, 13, 0, 0, 0, 0, 0, 25, 26, 27, 28, 29},
    {0, 17, 18, 19, 20, 21, 0, 0, 0, 0, 0, 33, 34, 35, 36, 37},
    {0, 25, 26, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 33, 34, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };








    sprite.setTexture(texture3);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer3[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                                                  (tileNumber - 1) / (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                                                  ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }
 */