#include <SFML/Graphics.hpp>
#include <vector>
#include <sstream>
#include <iostream>

const int WINDOW_WIDTH = 1024;
const int WINDOW_HEIGHT = 1024;

const int TILE_SIZE = 32;

const int LAYER_WIDTH = 32;
const int LAYER_HEIGHT = 32;

int layer1[LAYER_HEIGHT][LAYER_WIDTH] =
{
1,15,3,4,5,5,3,4,30,2,3,4,1,2,3,35,36,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,
9,5,5,6,7,5,6,7,9,10,11,12,9,10,5,43,44,10,11,5,6,7,5,6,7,30,11,10,10,10,11,12,
17,5,13,14,15,13,14,15,17,5,5,6,7,8,13,35,36,18,19,10,14,15,10,14,15,18,19,18,18,10,6,7,
5,5,21,22,23,21,10,23,25,13,13,30,15,5,6,43,44,26,27,18,10,10,18,22,23,5,10,10,18,18,10,15,
1,5,10,5,1,5,18,7,30,7,8,22,23,13,14,35,36,5,6,18,18,18,10,10,10,5,18,18,15,18,18,10,
5,10,18,5,9,13,14,15,10,15,16,12,9,21,22,35,36,13,14,15,5,18,18,18,18,13,18,10,23,23,22,18,
5,18,10,20,17,21,22,23,18,23,24,10,17,13,14,43,44,21,22,23,5,5,5,10,10,21,22,18,17,21,22,23,
5,18,18,28,25,26,21,22,18,24,27,18,25,21,22,35,36,26,27,28,5,5,5,10,10,7,27,28,10,26,21,22,
13,14,18,6,7,8,3,4,1,2,3,5,6,10,6,43,44,10,30,4,5,6,7,18,18,15,7,4,18,2,3,4,
21,22,23,14,15,16,11,5,10,15,8,14,15,18,6,35,36,18,5,6,7,10,10,21,22,10,15,12,9,30,11,12,
17,18,21,22,30,24,19,13,18,15,16,13,14,10,14,35,36,18,13,14,15,18,18,5,21,18,23,20,17,18,19,20,
25,26,10,28,25,10,27,21,10,23,10,21,10,10,22,43,44,26,21,22,23,23,23,13,14,15,24,28,25,26,10,28,
1,2,10,4,5,18,7,4,18,5,18,10,10,10,10,35,36,7,3,4,13,14,15,21,22,23,3,5,6,7,18,4,
9,10,18,12,13,14,15,12,9,10,18,18,18,18,18,43,44,15,11,12,21,10,23,23,5,5,11,13,14,15,18,12,
17,18,19,5,30,22,23,5,17,18,5,6,7,7,19,35,36,23,19,5,5,18,7,10,5,15,19,21,22,10,18,20,
25,26,27,28,5,5,5,5,6,7,7,14,10,15,10,43,44,7,5,6,10,10,10,18,25,26,27,28,5,10,7,8,
37,38,37,38,39,37,38,39,37,39,40,38,37,37,38,61,62,38,39,40,37,38,39,38,40,37,38,37,38,40,38,38,
45,46,45,46,47,45,46,47,45,47,48,46,45,45,46,58,57,46,47,48,45,46,47,46,48,45,46,45,46,48,46,46,
17,5,30,10,18,10,21,10,22,18,18,18,18,18,18,35,36,22,23,20,17,18,22,18,23,18,19,20,21,18,18,24,
10,10,5,10,10,18,27,10,5,5,6,7,7,10,8,51,52,7,8,8,30,18,5,6,7,8,8,28,25,26,27,28,
18,10,5,10,10,18,10,18,10,13,14,10,10,18,10,35,36,15,7,10,5,6,7,10,15,16,16,4,1,2,3,4,
30,18,5,10,18,18,18,12,18,22,22,18,18,18,18,35,36,10,15,18,13,14,15,18,23,24,24,5,5,6,7,12,
17,18,30,10,22,22,5,22,10,10,10,15,21,10,10,51,52,18,23,20,21,22,23,20,17,18,5,13,13,14,15,20,
25,22,22,10,7,10,6,7,18,10,18,8,5,18,18,35,36,18,27,28,25,26,27,28,5,6,13,21,21,22,23,28,
22,22,13,10,10,10,10,10,10,10,10,10,13,14,10,43,44,5,5,5,6,7,8,8,8,5,10,7,7,15,3,4,
9,10,21,18,18,18,18,18,18,18,18,18,21,10,18,35,36,6,7,10,5,5,5,5,5,10,10,15,15,23,11,12,
5,18,21,10,13,14,22,18,22,18,15,10,22,18,19,51,52,5,6,18,8,23,24,24,24,18,18,23,23,18,5,6,
22,26,21,18,21,22,23,28,5,6,7,18,5,6,7,43,44,13,1,1,7,26,27,28,25,18,14,15,8,26,13,14,
22,30,5,6,7,7,10,6,7,5,6,7,13,14,15,35,36,10,5,6,7,7,3,30,10,10,22,23,16,2,10,22,
9,5,13,14,15,5,18,7,15,13,14,15,21,5,6,43,44,18,13,14,15,15,11,12,18,18,5,10,7,10,18,12,
22,22,21,22,23,13,14,15,23,21,22,23,17,13,14,51,52,15,21,22,23,23,19,20,17,18,13,18,15,18,19,20,
25,5,27,21,22,21,22,23,25,26,27,28,25,21,22,59,60,23,27,28,25,26,27,28,25,26,21,22,23,26,27,28
};

int layer2[LAYER_HEIGHT][LAYER_WIDTH] =
    {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,65,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,65,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,65,0,0,0,0,0,0,
0,65,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,65,0,
0,0,0,0,0,68,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,65,0,0,0,0,
68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,65,0,0,
0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,65,0,0,
0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
int layer3[LAYER_HEIGHT][LAYER_WIDTH] =
{
0,0,0,0,81,82,83,84,0,0,123,124,0,0,0,0,0,81,82,83,84,85,0,0,0,0,0,0,86,87,88,0,
0,0,130,0,89,90,91,92,0,0,131,132,0,0,0,0,0,89,90,91,92,93,0,0,123,124,0,0,94,95,96,0,
81,82,83,84,97,98,99,100,82,83,84,0,0,88,0,0,0,97,98,99,100,101,0,0,131,132,0,0,102,103,104,0,
89,90,91,92,105,106,107,108,90,91,92,0,0,0,0,0,0,105,106,107,108,81,82,83,84,85,0,0,110,111,112,0,
97,98,99,100,113,114,115,116,98,99,100,0,0,0,0,0,0,113,114,115,116,89,90,91,92,123,124,0,118,119,120,0,
105,106,107,108,86,87,88,105,106,107,108,0,125,126,127,0,0,0,0,0,0,97,98,99,100,131,132,125,126,127,0,0,
113,114,115,116,94,95,96,113,114,115,116,0,133,134,135,0,0,0,0,0,0,105,106,107,108,109,0,133,134,135,0,0,
0,0,0,0,102,103,104,123,124,0,81,82,141,142,143,0,0,130,0,0,0,113,114,115,116,117,0,141,142,143,87,88,
125,126,127,0,110,111,112,131,132,0,89,90,91,92,93,0,0,0,0,0,0,123,124,0,81,82,83,84,126,94,95,96,
133,134,135,0,118,119,120,83,84,0,97,98,99,100,101,0,0,0,86,87,88,131,132,0,89,90,91,92,93,102,103,104,
141,142,143,0,0,89,90,91,92,0,105,106,107,108,109,0,0,0,94,95,96,139,140,0,97,98,99,100,101,110,111,112,
0,0,86,87,88,97,98,99,100,0,113,114,115,116,117,0,0,0,102,103,104,0,0,0,105,106,107,108,109,118,119,120,
0,0,94,95,96,105,106,107,108,0,0,0,0,0,0,0,0,0,110,111,112,0,0,0,113,114,115,116,117,0,0,0,
130,0,102,103,104,113,114,115,116,0,0,0,0,0,0,0,0,130,118,119,120,0,0,0,0,0,0,0,0,0,0,0,
0,0,110,111,112,0,0,0,0,0,0,123,124,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,123,124,0,0,
0,0,118,119,120,0,0,0,0,0,0,131,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,132,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,86,87,88,0,0,0,0,0,0,0,0,0,0,0,0,81,82,83,84,85,0,0,0,0,0,0,86,87,88,0,
0,0,94,95,96,0,86,87,88,0,0,81,82,83,84,85,0,89,90,91,92,93,0,0,0,0,130,0,94,95,96,0,
0,0,102,103,104,0,94,95,96,0,0,89,90,91,92,93,0,97,98,99,100,86,87,88,0,0,0,0,102,103,104,0,
0,0,110,111,112,0,102,103,104,0,0,97,98,99,100,101,0,105,106,107,108,94,95,96,0,0,0,0,110,111,112,0,
0,130,118,119,120,0,110,111,112,0,0,105,106,107,108,109,0,113,114,115,116,102,103,104,81,82,83,84,118,119,120,0,
0,0,0,0,0,0,118,119,86,87,88,113,114,115,116,117,0,0,0,0,0,110,111,112,89,90,91,92,93,0,0,0,
0,0,86,87,88,0,0,0,94,95,96,0,0,0,0,0,0,0,0,0,0,118,119,120,97,98,99,100,101,0,0,0,
0,0,94,95,96,0,0,0,102,103,104,0,123,124,0,0,0,86,130,88,0,0,0,0,105,106,107,108,109,0,0,0,
0,0,102,103,104,0,0,0,110,111,112,0,131,132,0,0,0,94,95,96,0,0,0,0,113,114,115,116,117,0,0,0,
0,0,110,111,112,0,0,0,118,119,120,0,139,140,0,0,0,102,103,104,0,0,0,0,0,0,0,81,82,83,84,85,
0,0,118,119,86,87,88,0,81,82,83,84,130,0,0,0,0,110,111,112,0,0,130,0,86,87,88,89,90,91,92,93,
0,0,0,0,94,95,96,127,89,90,91,92,93,0,0,0,0,118,119,120,0,0,0,0,94,95,96,97,98,99,100,101,
0,123,124,0,102,103,104,135,97,98,99,100,101,0,0,0,0,0,0,0,0,0,0,0,102,103,104,105,106,107,108,109,
0,131,132,0,110,111,112,143,105,106,107,108,109,0,130,0,0,0,0,0,0,130,0,0,110,111,112,113,114,115,116,117,
0,139,140,0,118,119,120,0,130,114,115,116,117,0,0,0,0,0,0,0,0,0,0,0,118,119,120,0,0,0,0,0
};



bool loadTexture(sf::Texture &texture, const std::string &path)
{
    return texture.loadFromFile(path);
}

void drawMap(sf::RenderWindow& window, const sf::Texture& texture1, const sf::Texture& texture2, const sf::Texture& texture3)
{
    sf::Sprite sprite;
    const int ACTUAL_TILE_SIZE = 32; // 256 / 8 = 32 (256x256 .png = 8(32x32) - tiles)
    const int TEXTURE_ATLAS_WIDTH = 256;
    const int TEXTURE_TREES_ATLAS_WIDTH = 256;
    const int TEXTURE_GRASS_ATLAS_WIDTH = 128;

    sprite.setTexture(texture1);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer1[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }

    sprite.setTexture(texture2);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer2[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_GRASS_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_GRASS_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }

    sprite.setTexture(texture3);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer3[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_TREES_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    (tileNumber - 1) / (TEXTURE_TREES_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                    ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }
}

int main()
{
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "test");
    sf::Texture texture1, texture2, texture3;
    if (!loadTexture(texture1, "src/textures/GrassAndTrails.png"))
        std::cerr << "Error loading texture1" << std::endl;
    if (!loadTexture(texture2, "src/textures/GrassSprite.png"))
        std::cerr << "Error loading texture2" << std::endl;
    if (!loadTexture(texture3, "src/textures/TX_PlantFix.png"))
        std::cerr << "Error loading texture3" << std::endl;

    sf::Clock clock;
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear(sf::Color::White);
        drawMap(window, texture1, texture2, texture3);
        window.display();

        static int frameCount = 0;
        static float elapsedTime = 0.0f;
        frameCount++;
        elapsedTime += clock.restart().asSeconds();

        if (elapsedTime >= 1.0f)
        {
            std::stringstream title;
            title << "FPS: " << frameCount;
            window.setTitle(title.str());
            frameCount = 0;
            elapsedTime = 0.0f;
        }
    }
}












/*
int layer3[LAYER_HEIGHT][LAYER_WIDTH] =
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 13},
    {0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21},
    {0, 9, 10, 11, 12, 13, 0, 0, 0, 0, 0, 25, 26, 27, 28, 29},
    {0, 17, 18, 19, 20, 21, 0, 0, 0, 0, 0, 33, 34, 35, 36, 37},
    {0, 25, 26, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 33, 34, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };








    sprite.setTexture(texture3);
    for (int y = 0; y < LAYER_HEIGHT; ++y)
    {
        for (int x = 0; x < LAYER_WIDTH; ++x)
        {
            int tileNumber = layer3[y][x];
            if (tileNumber > 0)
            {
                sprite.setTextureRect(sf::IntRect((tileNumber - 1) % (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                                                  (tileNumber - 1) / (TEXTURE_ATLAS_WIDTH / ACTUAL_TILE_SIZE) * ACTUAL_TILE_SIZE,
                                                  ACTUAL_TILE_SIZE, ACTUAL_TILE_SIZE));
                sprite.setPosition(x * TILE_SIZE, y * TILE_SIZE);
                window.draw(sprite);
            }
        }
    }
 */